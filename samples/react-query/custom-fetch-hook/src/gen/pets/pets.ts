/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useCallback } from 'react';
import type {
  CreatePetsBodyItem,
  Error,
  ListPetsParams,
  Pet,
  Pets,
} from '.././models';
import { useCustomFetch } from '../../custom-fetch';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary List all pets
 */
export type listPetsResponse = {
  data: Pets;
  status: number;
};

export const getListPetsUrl = (params?: ListPetsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/pets?${normalizedParams.toString()}`
    : `http://localhost:8000/pets`;
};

export const useListPetsHook = (): ((
  params?: ListPetsParams,
  options?: RequestInit,
) => Promise<listPetsResponse>) => {
  const listPets = useCustomFetch<Awaited<Promise<listPetsResponse>>>();

  return useCallback(
    (params?: ListPetsParams, options?: RequestInit) => {
      return listPets(getListPetsUrl(params), {
        ...options,
        method: 'GET',
      });
    },
    [listPets],
  );
};

export const getListPetsQueryKey = (params?: ListPetsParams) => {
  return [`http://localhost:8000/pets`, ...(params ? [params] : [])] as const;
};

export const useListPetsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
  TError = unknown,
>(
  params?: ListPetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListPetsQueryKey(params);

  const listPets = useListPetsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>
  > = ({ signal }) => listPets(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListPetsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>
>;
export type ListPetsQueryError = unknown;

export function useListPets<
  TData = Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
  TError = unknown,
>(
  params: undefined | ListPetsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListPets<
  TData = Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
  TError = unknown,
>(
  params?: ListPetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListPets<
  TData = Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
  TError = unknown,
>(
  params?: ListPetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List all pets
 */

export function useListPets<
  TData = Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
  TError = unknown,
>(
  params?: ListPetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useListPetsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create a pet
 */
export type createPetsResponse = {
  data: Pet;
  status: number;
};

export const getCreatePetsUrl = () => {
  return `http://localhost:8000/pets`;
};

export const useCreatePetsHook = (): ((
  createPetsBodyItem: CreatePetsBodyItem[],
  options?: RequestInit,
) => Promise<createPetsResponse>) => {
  const createPets = useCustomFetch<Awaited<Promise<createPetsResponse>>>();

  return useCallback(
    (createPetsBodyItem: CreatePetsBodyItem[], options?: RequestInit) => {
      return createPets(getCreatePetsUrl(), {
        ...options,
        method: 'POST',
        headers: { 'Content-Type': 'application/json', ...options?.headers },
        body: JSON.stringify(createPetsBodyItem),
      });
    },
    [createPets],
  );
};

export const useCreatePetsMutationOptions = <
  TError = Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
    TError,
    { data: CreatePetsBodyItem[] },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
  TError,
  { data: CreatePetsBodyItem[] },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const createPets = useCreatePetsHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
    { data: CreatePetsBodyItem[] }
  > = (props) => {
    const { data } = props ?? {};

    return createPets(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePetsMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>
>;
export type CreatePetsMutationBody = CreatePetsBodyItem[];
export type CreatePetsMutationError = Error;

/**
 * @summary Create a pet
 */
export const useCreatePets = <TError = Error, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
    TError,
    { data: CreatePetsBodyItem[] },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
  TError,
  { data: CreatePetsBodyItem[] },
  TContext
> => {
  const mutationOptions = useCreatePetsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update a pet
 */
export type updatePetsResponse = {
  data: Pet;
  status: number;
};

export const getUpdatePetsUrl = () => {
  return `http://localhost:8000/pets`;
};

export const useUpdatePetsHook = (): ((
  pet: NonReadonly<Pet>,
  options?: RequestInit,
) => Promise<updatePetsResponse>) => {
  const updatePets = useCustomFetch<Awaited<Promise<updatePetsResponse>>>();

  return useCallback(
    (pet: NonReadonly<Pet>, options?: RequestInit) => {
      return updatePets(getUpdatePetsUrl(), {
        ...options,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json', ...options?.headers },
        body: JSON.stringify(pet),
      });
    },
    [updatePets],
  );
};

export const useUpdatePetsMutationOptions = <
  TError = Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdatePetsHook>>>,
    TError,
    { data: NonReadonly<Pet> },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useUpdatePetsHook>>>,
  TError,
  { data: NonReadonly<Pet> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const updatePets = useUpdatePetsHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useUpdatePetsHook>>>,
    { data: NonReadonly<Pet> }
  > = (props) => {
    const { data } = props ?? {};

    return updatePets(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePetsMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUpdatePetsHook>>>
>;
export type UpdatePetsMutationBody = NonReadonly<Pet>;
export type UpdatePetsMutationError = Error;

/**
 * @summary Update a pet
 */
export const useUpdatePets = <TError = Error, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdatePetsHook>>>,
    TError,
    { data: NonReadonly<Pet> },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useUpdatePetsHook>>>,
  TError,
  { data: NonReadonly<Pet> },
  TContext
> => {
  const mutationOptions = useUpdatePetsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Info for a specific pet
 */
export type showPetByIdResponse = {
  data: Pet;
  status: number;
};

export const getShowPetByIdUrl = (petId: string) => {
  return `http://localhost:8000/pets/${petId}`;
};

export const useShowPetByIdHook = (): ((
  petId: string,
  options?: RequestInit,
) => Promise<showPetByIdResponse>) => {
  const showPetById = useCustomFetch<Awaited<Promise<showPetByIdResponse>>>();

  return useCallback(
    (petId: string, options?: RequestInit) => {
      return showPetById(getShowPetByIdUrl(petId), {
        ...options,
        method: 'GET',
      });
    },
    [showPetById],
  );
};

export const getShowPetByIdQueryKey = (petId: string) => {
  return [`http://localhost:8000/pets/${petId}`] as const;
};

export const useShowPetByIdQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
  TError = Error,
>(
  petId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);

  const showPetById = useShowPetByIdHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>
  > = ({ signal }) => showPetById(petId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!petId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShowPetByIdQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>
>;
export type ShowPetByIdQueryError = Error;

export function useShowPetById<
  TData = Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
  TError = Error,
>(
  petId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useShowPetById<
  TData = Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
  TError = Error,
>(
  petId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useShowPetById<
  TData = Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
  TError = Error,
>(
  petId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Info for a specific pet
 */

export function useShowPetById<
  TData = Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
  TError = Error,
>(
  petId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomFetch>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useShowPetByIdQueryOptions(petId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
